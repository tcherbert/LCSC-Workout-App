{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, w as writeTask, d as getIonMode, h, e as getElement, H as Host } from './core-ca0488fc.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nvar Refresher =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    registerInstance(this, hostRef);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    /**\n     * The current state which the refresher is in. The refresher's states include:\n     *\n     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n     * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n     */\n\n    this.state = 1\n    /* Inactive */\n    ;\n    /**\n     * The minimum distance the user must pull down until the\n     * refresher will go into the `refreshing` state.\n     */\n\n    this.pullMin = 60;\n    /**\n     * The maximum distance of the pull until the refresher\n     * will automatically go into the `refreshing` state.\n     * Defaults to the result of `pullMin + 60`.\n     */\n\n    this.pullMax = this.pullMin + 60;\n    /**\n     * Time it takes to close the refresher.\n     */\n\n    this.closeDuration = '280ms';\n    /**\n     * Time it takes the refresher to to snap back to the `refreshing` state.\n     */\n\n    this.snapbackDuration = '280ms';\n    /**\n     * How much to multiply the pull speed by. To slow the pull animation down,\n     * pass a number less than `1`. To speed up the pull, pass a number greater\n     * than `1`. The default value is `1` which is equal to the speed of the cursor.\n     * If a negative value is passed in, the factor will be `1` instead.\n     *\n     * For example: If the value passed is `1.2` and the content is dragged by\n     * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n     * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n     * will be `8` pixels, less than the amount the cursor has moved.\n     */\n\n    this.pullFactor = 1;\n    /**\n     * If `true`, the refresher will be hidden.\n     */\n\n    this.disabled = false;\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n  }\n\n  class_1.prototype.disabledChanged = function () {\n    if (this.gesture) {\n      this.gesture.setDisabled(this.disabled);\n    }\n  };\n\n  class_1.prototype.connectedCallback = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var contentEl, _a, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.el.getAttribute('slot') !== 'fixed') {\n              console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n              return [2\n              /*return*/\n              ];\n            }\n\n            contentEl = this.el.closest('ion-content');\n\n            if (!contentEl) {\n              console.error('<ion-refresher> must be used inside an <ion-content>');\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a = this;\n            return [4\n            /*yield*/\n            , contentEl.getScrollElement()];\n\n          case 1:\n            _a.scrollEl = _c.sent();\n            _b = this;\n            return [4\n            /*yield*/\n            , import('./index-624eea58.js')];\n\n          case 2:\n            _b.gesture = _c.sent().createGesture({\n              el: contentEl,\n              gestureName: 'refresher',\n              gesturePriority: 10,\n              direction: 'y',\n              threshold: 20,\n              passive: false,\n              canStart: function () {\n                return _this.canStart();\n              },\n              onStart: function () {\n                return _this.onStart();\n              },\n              onMove: function (ev) {\n                return _this.onMove(ev);\n              },\n              onEnd: function () {\n                return _this.onEnd();\n              }\n            });\n            this.disabledChanged();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.disconnectedCallback = function () {\n    this.scrollEl = undefined;\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  };\n  /**\n   * Call `complete()` when your async operation has completed.\n   * For example, the `refreshing` state is while the app is performing\n   * an asynchronous operation, such as receiving more data from an\n   * AJAX request. Once the data has been received, you then call this\n   * method to signify that the refreshing has completed and to close\n   * the refresher. This method also changes the refresher's state from\n   * `refreshing` to `completing`.\n   */\n\n\n  class_1.prototype.complete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.close(32\n        /* Completing */\n        , '120ms');\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Changes the refresher's state from `refreshing` to `cancelling`.\n   */\n\n\n  class_1.prototype.cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.close(16\n        /* Cancelling */\n        , '');\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * A number representing how far down the user has pulled.\n   * The number `0` represents the user hasn't pulled down at all. The\n   * number `1`, and anything greater than `1`, represents that the user\n   * has pulled far enough down that when they let go then the refresh will\n   * happen. If they let go and the number is less than `1`, then the\n   * refresh will not happen, and the content will return to it's original\n   * position.\n   */\n\n\n  class_1.prototype.getProgress = function () {\n    return Promise.resolve(this.progress);\n  };\n\n  class_1.prototype.canStart = function () {\n    if (!this.scrollEl) {\n      return false;\n    }\n\n    if (this.state !== 1\n    /* Inactive */\n    ) {\n        return false;\n      } // if the scrollTop is greater than zero then it's\n    // not possible to pull the content down yet\n\n\n    if (this.scrollEl.scrollTop > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  class_1.prototype.onStart = function () {\n    this.progress = 0;\n    this.state = 1\n    /* Inactive */\n    ;\n  };\n\n  class_1.prototype.onMove = function (detail) {\n    if (!this.scrollEl) {\n      return;\n    } // this method can get called like a bazillion times per second,\n    // so it's built to be as efficient as possible, and does its\n    // best to do any DOM read/writes only when absolutely necessary\n    // if multi-touch then get out immediately\n\n\n    var ev = detail.event;\n\n    if (ev.touches && ev.touches.length > 1) {\n      return;\n    } // do nothing if it's actively refreshing\n    // or it's in the way of closing\n    // or this was never a startY\n\n\n    if ((this.state & 56\n    /* _BUSY_ */\n    ) !== 0) {\n      return;\n    }\n\n    var pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n    var deltaY = detail.deltaY * pullFactor; // don't bother if they're scrolling up\n    // and have not already started dragging\n\n    if (deltaY <= 0) {\n      // the current Y is higher than the starting Y\n      // so they scrolled up enough to be ignored\n      this.progress = 0;\n      this.state = 1\n      /* Inactive */\n      ;\n\n      if (this.appliedStyles) {\n        // reset the styles only if they were applied\n        this.setCss(0, '', false, '');\n        return;\n      }\n\n      return;\n    }\n\n    if (this.state === 1\n    /* Inactive */\n    ) {\n        // this refresh is not already actively pulling down\n        // get the content's scrollTop\n        var scrollHostScrollTop = this.scrollEl.scrollTop; // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n\n        if (scrollHostScrollTop > 0) {\n          this.progress = 0;\n          return;\n        } // content scrolled all the way to the top, and dragging down\n\n\n        this.state = 2\n        /* Pulling */\n        ;\n      } // prevent native scroll events\n\n\n    if (ev.cancelable) {\n      ev.preventDefault();\n    } // the refresher is actively pulling at this point\n    // move the scroll element within the content element\n\n\n    this.setCss(deltaY, '0ms', true, '');\n\n    if (deltaY === 0) {\n      // don't continue if there's no delta yet\n      this.progress = 0;\n      return;\n    }\n\n    var pullMin = this.pullMin; // set pull progress\n\n    this.progress = deltaY / pullMin; // emit \"start\" if it hasn't started yet\n\n    if (!this.didStart) {\n      this.didStart = true;\n      this.ionStart.emit();\n    } // emit \"pulling\" on every move\n\n\n    this.ionPull.emit(); // do nothing if the delta is less than the pull threshold\n\n    if (deltaY < pullMin) {\n      // ensure it stays in the pulling state, cuz its not ready yet\n      this.state = 2\n      /* Pulling */\n      ;\n      return;\n    }\n\n    if (deltaY > this.pullMax) {\n      // they pulled farther than the max, so kick off the refresh\n      this.beginRefresh();\n      return;\n    } // pulled farther than the pull min!!\n    // it is now in the `ready` state!!\n    // if they let go then it'll refresh, kerpow!!\n\n\n    this.state = 4\n    /* Ready */\n    ;\n    return;\n  };\n\n  class_1.prototype.onEnd = function () {\n    // only run in a zone when absolutely necessary\n    if (this.state === 4\n    /* Ready */\n    ) {\n        // they pulled down far enough, so it's ready to refresh\n        this.beginRefresh();\n      } else if (this.state === 2\n    /* Pulling */\n    ) {\n        // they were pulling down, but didn't pull down far enough\n        // set the content back to it's original location\n        // and close the refresher\n        // set that the refresh is actively cancelling\n        this.cancel();\n      }\n  };\n\n  class_1.prototype.beginRefresh = function () {\n    // assumes we're already back in a zone\n    // they pulled down far enough, so it's ready to refresh\n    this.state = 8\n    /* Refreshing */\n    ; // place the content in a hangout position while it thinks\n\n    this.setCss(this.pullMin, this.snapbackDuration, true, ''); // emit \"refresh\" because it was pulled down far enough\n    // and they let go to begin refreshing\n\n    this.ionRefresh.emit({\n      complete: this.complete.bind(this)\n    });\n  };\n\n  class_1.prototype.close = function (state, delay) {\n    var _this = this; // create fallback timer incase something goes wrong with transitionEnd event\n\n\n    setTimeout(function () {\n      _this.state = 1\n      /* Inactive */\n      ;\n      _this.progress = 0;\n      _this.didStart = false;\n\n      _this.setCss(0, '0ms', false, '');\n    }, 600); // reset set the styles on the scroll element\n    // set that the refresh is actively cancelling/completing\n\n    this.state = state;\n    this.setCss(0, this.closeDuration, true, delay); // TODO: stop gesture\n  };\n\n  class_1.prototype.setCss = function (y, duration, overflowVisible, delay) {\n    var _this = this;\n\n    this.appliedStyles = y > 0;\n    writeTask(function () {\n      if (_this.scrollEl) {\n        var style = _this.scrollEl.style;\n        style.transform = y > 0 ? \"translateY(\" + y + \"px) translateZ(0px)\" : 'translateZ(0px)';\n        style.transitionDuration = duration;\n        style.transitionDelay = delay;\n        style.overflow = overflowVisible ? 'hidden' : '';\n      }\n    });\n  };\n\n  class_1.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    return h(Host, {\n      slot: \"fixed\",\n      class: (_a = {}, _a[mode] = true, // Used internally for styling\n      _a[\"refresher-\" + mode] = true, _a['refresher-active'] = this.state !== 1\n      /* Inactive */\n      , _a['refresher-pulling'] = this.state === 2\n      /* Pulling */\n      , _a['refresher-ready'] = this.state === 4\n      /* Ready */\n      , _a['refresher-refreshing'] = this.state === 8\n      /* Refreshing */\n      , _a['refresher-cancelling'] = this.state === 16\n      /* Cancelling */\n      , _a['refresher-completing'] = this.state === 32\n      /* Completing */\n      , _a)\n    });\n  };\n\n  Object.defineProperty(class_1.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"watchers\", {\n    get: function () {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"style\", {\n    get: function () {\n      return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_1;\n}();\n\nvar RefresherContent =\n/** @class */\nfunction () {\n  function RefresherContent(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  RefresherContent.prototype.componentWillLoad = function () {\n    if (this.pullingIcon === undefined) {\n      this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n    }\n\n    if (this.refreshingSpinner === undefined) {\n      var mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  };\n\n  RefresherContent.prototype.render = function () {\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"div\", {\n      class: \"refresher-pulling\"\n    }, this.pullingIcon && h(\"div\", {\n      class: \"refresher-pulling-icon\"\n    }, h(\"ion-icon\", {\n      icon: this.pullingIcon,\n      lazy: false\n    })), this.pullingText && h(\"div\", {\n      class: \"refresher-pulling-text\",\n      innerHTML: sanitizeDOMString(this.pullingText)\n    })), h(\"div\", {\n      class: \"refresher-refreshing\"\n    }, this.refreshingSpinner && h(\"div\", {\n      class: \"refresher-refreshing-icon\"\n    }, h(\"ion-spinner\", {\n      name: this.refreshingSpinner\n    })), this.refreshingText && h(\"div\", {\n      class: \"refresher-refreshing-text\",\n      innerHTML: sanitizeDOMString(this.refreshingText)\n    })));\n  };\n\n  return RefresherContent;\n}();\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };","map":{"version":3,"sources":["/Users/timherbert/OneDrive/school/cs480/LCSCWorkoutApp/node_modules/@ionic/core/dist/esm-es5/ion-refresher_2-ios.entry.js"],"names":["__awaiter","__generator","r","registerInstance","c","createEvent","w","writeTask","d","getIonMode","h","e","getElement","H","Host","b","config","s","sanitizeDOMString","Refresher","class_1","hostRef","appliedStyles","didStart","progress","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","ionRefresh","ionPull","ionStart","prototype","disabledChanged","gesture","setDisabled","connectedCallback","contentEl","_a","_b","_this","_c","label","el","getAttribute","console","error","closest","getScrollElement","scrollEl","sent","createGesture","gestureName","gesturePriority","direction","threshold","passive","canStart","onStart","onMove","ev","onEnd","disconnectedCallback","undefined","destroy","complete","close","cancel","getProgress","Promise","resolve","scrollTop","detail","event","touches","length","Number","isNaN","deltaY","setCss","scrollHostScrollTop","cancelable","preventDefault","emit","beginRefresh","bind","delay","setTimeout","y","duration","overflowVisible","style","transform","transitionDuration","transitionDelay","overflow","render","mode","slot","class","Object","defineProperty","get","enumerable","configurable","RefresherContent","componentWillLoad","pullingIcon","refreshingSpinner","icon","lazy","pullingText","innerHTML","name","refreshingText","ion_refresher","ion_refresher_content"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,CAAC,IAAIC,gBAAd,EAAgCC,CAAC,IAAIC,WAArC,EAAkDC,CAAC,IAAIC,SAAvD,EAAkEC,CAAC,IAAIC,UAAvE,EAAmFC,CAAnF,EAAsFC,CAAC,IAAIC,UAA3F,EAAuGC,CAAC,IAAIC,IAA5G,QAAwH,oBAAxH;AACA,SAASC,CAAC,IAAIC,MAAd,QAA4B,sBAA5B;AACA,SAASC,CAAC,IAAIC,iBAAd,QAAuC,qBAAvC;;AACA,IAAIC,SAAS;AAAG;AAAe,YAAY;AACvC,WAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACtBlB,IAAAA,gBAAgB,CAAC,IAAD,EAAOkB,OAAP,CAAhB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA;;;;;;;;;;;AAUA,SAAKC,KAAL,GAAa;AAAE;AAAf;AACA;;;;;AAIA,SAAKC,OAAL,GAAe,EAAf;AACA;;;;;;AAKA,SAAKC,OAAL,GAAe,KAAKD,OAAL,GAAe,EAA9B;AACA;;;;AAGA,SAAKE,aAAL,GAAqB,OAArB;AACA;;;;AAGA,SAAKC,gBAAL,GAAwB,OAAxB;AACA;;;;;;;;;;;;AAWA,SAAKC,UAAL,GAAkB,CAAlB;AACA;;;;AAGA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,UAAL,GAAkB3B,WAAW,CAAC,IAAD,EAAO,YAAP,EAAqB,CAArB,CAA7B;AACA,SAAK4B,OAAL,GAAe5B,WAAW,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAA1B;AACA,SAAK6B,QAAL,GAAgB7B,WAAW,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAnB,CAA3B;AACH;;AACDe,EAAAA,OAAO,CAACe,SAAR,CAAkBC,eAAlB,GAAoC,YAAY;AAC5C,QAAI,KAAKC,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAaC,WAAb,CAAyB,KAAKP,QAA9B;AACH;AACJ,GAJD;;AAKAX,EAAAA,OAAO,CAACe,SAAR,CAAkBI,iBAAlB,GAAsC,YAAY;AAC9C,WAAOvC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIwC,SAAJ,EAAeC,EAAf,EAAmBC,EAAnB;;AACA,UAAIC,KAAK,GAAG,IAAZ;;AACA,aAAO1C,WAAW,CAAC,IAAD,EAAO,UAAU2C,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACC,KAAX;AACI,eAAK,CAAL;AACI,gBAAI,KAAKC,EAAL,CAAQC,YAAR,CAAqB,MAArB,MAAiC,OAArC,EAA8C;AAC1CC,cAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd;AACA,qBAAO,CAAC;AAAE;AAAH,eAAP;AACH;;AACDT,YAAAA,SAAS,GAAG,KAAKM,EAAL,CAAQI,OAAR,CAAgB,aAAhB,CAAZ;;AACA,gBAAI,CAACV,SAAL,EAAgB;AACZQ,cAAAA,OAAO,CAACC,KAAR,CAAc,sDAAd;AACA,qBAAO,CAAC;AAAE;AAAH,eAAP;AACH;;AACDR,YAAAA,EAAE,GAAG,IAAL;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcD,SAAS,CAACW,gBAAV,EAAd,CAAP;;AACJ,eAAK,CAAL;AACIV,YAAAA,EAAE,CAACW,QAAH,GAAcR,EAAE,CAACS,IAAH,EAAd;AACAX,YAAAA,EAAE,GAAG,IAAL;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,OAAO,qBAAP,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIA,YAAAA,EAAE,CAACL,OAAH,GAAcO,EAAE,CAACS,IAAH,EAAD,CAAYC,aAAZ,CAA0B;AACnCR,cAAAA,EAAE,EAAEN,SAD+B;AAEnCe,cAAAA,WAAW,EAAE,WAFsB;AAGnCC,cAAAA,eAAe,EAAE,EAHkB;AAInCC,cAAAA,SAAS,EAAE,GAJwB;AAKnCC,cAAAA,SAAS,EAAE,EALwB;AAMnCC,cAAAA,OAAO,EAAE,KAN0B;AAOnCC,cAAAA,QAAQ,EAAE,YAAY;AAAE,uBAAOjB,KAAK,CAACiB,QAAN,EAAP;AAA0B,eAPf;AAQnCC,cAAAA,OAAO,EAAE,YAAY;AAAE,uBAAOlB,KAAK,CAACkB,OAAN,EAAP;AAAyB,eARb;AASnCC,cAAAA,MAAM,EAAE,UAAUC,EAAV,EAAc;AAAE,uBAAOpB,KAAK,CAACmB,MAAN,CAAaC,EAAb,CAAP;AAA0B,eATf;AAUnCC,cAAAA,KAAK,EAAE,YAAY;AAAE,uBAAOrB,KAAK,CAACqB,KAAN,EAAP;AAAuB;AAVT,aAA1B,CAAb;AAYA,iBAAK5B,eAAL;AACA,mBAAO,CAAC;AAAE;AAAH,aAAP;AA/BR;AAiCH,OAlCiB,CAAlB;AAmCH,KAtCe,CAAhB;AAuCH,GAxCD;;AAyCAhB,EAAAA,OAAO,CAACe,SAAR,CAAkB8B,oBAAlB,GAAyC,YAAY;AACjD,SAAKb,QAAL,GAAgBc,SAAhB;;AACA,QAAI,KAAK7B,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAa8B,OAAb;AACA,WAAK9B,OAAL,GAAe6B,SAAf;AACH;AACJ,GAND;AAOA;;;;;;;;;;;AASA9C,EAAAA,OAAO,CAACe,SAAR,CAAkBiC,QAAlB,GAA6B,YAAY;AACrC,WAAOpE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,aAAOC,WAAW,CAAC,IAAD,EAAO,UAAUwC,EAAV,EAAc;AACnC,aAAK4B,KAAL,CAAW;AAAG;AAAd,UAAgC,OAAhC;AACA,eAAO,CAAC;AAAE;AAAH,SAAP;AACH,OAHiB,CAAlB;AAIH,KALe,CAAhB;AAMH,GAPD;AAQA;;;;;AAGAjD,EAAAA,OAAO,CAACe,SAAR,CAAkBmC,MAAlB,GAA2B,YAAY;AACnC,WAAOtE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,aAAOC,WAAW,CAAC,IAAD,EAAO,UAAUwC,EAAV,EAAc;AACnC,aAAK4B,KAAL,CAAW;AAAG;AAAd,UAAgC,EAAhC;AACA,eAAO,CAAC;AAAE;AAAH,SAAP;AACH,OAHiB,CAAlB;AAIH,KALe,CAAhB;AAMH,GAPD;AAQA;;;;;;;;;;;AASAjD,EAAAA,OAAO,CAACe,SAAR,CAAkBoC,WAAlB,GAAgC,YAAY;AACxC,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKjD,QAArB,CAAP;AACH,GAFD;;AAGAJ,EAAAA,OAAO,CAACe,SAAR,CAAkByB,QAAlB,GAA6B,YAAY;AACrC,QAAI,CAAC,KAAKR,QAAV,EAAoB;AAChB,aAAO,KAAP;AACH;;AACD,QAAI,KAAK3B,KAAL,KAAe;AAAE;AAArB,MAAqC;AACjC,eAAO,KAAP;AACH,OANoC,CAOrC;AACA;;;AACA,QAAI,KAAK2B,QAAL,CAAcsB,SAAd,GAA0B,CAA9B,EAAiC;AAC7B,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GAbD;;AAcAtD,EAAAA,OAAO,CAACe,SAAR,CAAkB0B,OAAlB,GAA4B,YAAY;AACpC,SAAKrC,QAAL,GAAgB,CAAhB;AACA,SAAKC,KAAL,GAAa;AAAE;AAAf;AACH,GAHD;;AAIAL,EAAAA,OAAO,CAACe,SAAR,CAAkB2B,MAAlB,GAA2B,UAAUa,MAAV,EAAkB;AACzC,QAAI,CAAC,KAAKvB,QAAV,EAAoB;AAChB;AACH,KAHwC,CAIzC;AACA;AACA;AACA;;;AACA,QAAIW,EAAE,GAAGY,MAAM,CAACC,KAAhB;;AACA,QAAIb,EAAE,CAACc,OAAH,IAAcd,EAAE,CAACc,OAAH,CAAWC,MAAX,GAAoB,CAAtC,EAAyC;AACrC;AACH,KAXwC,CAYzC;AACA;AACA;;;AACA,QAAI,CAAC,KAAKrD,KAAL,GAAa;AAAG;AAAjB,UAAmC,CAAvC,EAA0C;AACtC;AACH;;AACD,QAAIK,UAAU,GAAIiD,MAAM,CAACC,KAAP,CAAa,KAAKlD,UAAlB,KAAiC,KAAKA,UAAL,GAAkB,CAApD,GAAyD,CAAzD,GAA6D,KAAKA,UAAnF;AACA,QAAImD,MAAM,GAAGN,MAAM,CAACM,MAAP,GAAgBnD,UAA7B,CAnByC,CAoBzC;AACA;;AACA,QAAImD,MAAM,IAAI,CAAd,EAAiB;AACb;AACA;AACA,WAAKzD,QAAL,GAAgB,CAAhB;AACA,WAAKC,KAAL,GAAa;AAAE;AAAf;;AACA,UAAI,KAAKH,aAAT,EAAwB;AACpB;AACA,aAAK4D,MAAL,CAAY,CAAZ,EAAe,EAAf,EAAmB,KAAnB,EAA0B,EAA1B;AACA;AACH;;AACD;AACH;;AACD,QAAI,KAAKzD,KAAL,KAAe;AAAE;AAArB,MAAqC;AACjC;AACA;AACA,YAAI0D,mBAAmB,GAAG,KAAK/B,QAAL,CAAcsB,SAAxC,CAHiC,CAIjC;AACA;;AACA,YAAIS,mBAAmB,GAAG,CAA1B,EAA6B;AACzB,eAAK3D,QAAL,GAAgB,CAAhB;AACA;AACH,SATgC,CAUjC;;;AACA,aAAKC,KAAL,GAAa;AAAE;AAAf;AACH,OA9CwC,CA+CzC;;;AACA,QAAIsC,EAAE,CAACqB,UAAP,EAAmB;AACfrB,MAAAA,EAAE,CAACsB,cAAH;AACH,KAlDwC,CAmDzC;AACA;;;AACA,SAAKH,MAAL,CAAYD,MAAZ,EAAoB,KAApB,EAA2B,IAA3B,EAAiC,EAAjC;;AACA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AACd;AACA,WAAKzD,QAAL,GAAgB,CAAhB;AACA;AACH;;AACD,QAAIE,OAAO,GAAG,KAAKA,OAAnB,CA3DyC,CA4DzC;;AACA,SAAKF,QAAL,GAAgByD,MAAM,GAAGvD,OAAzB,CA7DyC,CA8DzC;;AACA,QAAI,CAAC,KAAKH,QAAV,EAAoB;AAChB,WAAKA,QAAL,GAAgB,IAAhB;AACA,WAAKW,QAAL,CAAcoD,IAAd;AACH,KAlEwC,CAmEzC;;;AACA,SAAKrD,OAAL,CAAaqD,IAAb,GApEyC,CAqEzC;;AACA,QAAIL,MAAM,GAAGvD,OAAb,EAAsB;AAClB;AACA,WAAKD,KAAL,GAAa;AAAE;AAAf;AACA;AACH;;AACD,QAAIwD,MAAM,GAAG,KAAKtD,OAAlB,EAA2B;AACvB;AACA,WAAK4D,YAAL;AACA;AACH,KA/EwC,CAgFzC;AACA;AACA;;;AACA,SAAK9D,KAAL,GAAa;AAAE;AAAf;AACA;AACH,GArFD;;AAsFAL,EAAAA,OAAO,CAACe,SAAR,CAAkB6B,KAAlB,GAA0B,YAAY;AAClC;AACA,QAAI,KAAKvC,KAAL,KAAe;AAAE;AAArB,MAAkC;AAC9B;AACA,aAAK8D,YAAL;AACH,OAHD,MAIK,IAAI,KAAK9D,KAAL,KAAe;AAAE;AAArB,MAAoC;AACrC;AACA;AACA;AACA;AACA,aAAK6C,MAAL;AACH;AACJ,GAbD;;AAcAlD,EAAAA,OAAO,CAACe,SAAR,CAAkBoD,YAAlB,GAAiC,YAAY;AACzC;AACA;AACA,SAAK9D,KAAL,GAAa;AAAE;AAAf,KAHyC,CAIzC;;AACA,SAAKyD,MAAL,CAAY,KAAKxD,OAAjB,EAA0B,KAAKG,gBAA/B,EAAiD,IAAjD,EAAuD,EAAvD,EALyC,CAMzC;AACA;;AACA,SAAKG,UAAL,CAAgBsD,IAAhB,CAAqB;AACjBlB,MAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcoB,IAAd,CAAmB,IAAnB;AADO,KAArB;AAGH,GAXD;;AAYApE,EAAAA,OAAO,CAACe,SAAR,CAAkBkC,KAAlB,GAA0B,UAAU5C,KAAV,EAAiBgE,KAAjB,EAAwB;AAC9C,QAAI9C,KAAK,GAAG,IAAZ,CAD8C,CAE9C;;;AACA+C,IAAAA,UAAU,CAAC,YAAY;AACnB/C,MAAAA,KAAK,CAAClB,KAAN,GAAc;AAAE;AAAhB;AACAkB,MAAAA,KAAK,CAACnB,QAAN,GAAiB,CAAjB;AACAmB,MAAAA,KAAK,CAACpB,QAAN,GAAiB,KAAjB;;AACAoB,MAAAA,KAAK,CAACuC,MAAN,CAAa,CAAb,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,EAA9B;AACH,KALS,EAKP,GALO,CAAV,CAH8C,CAS9C;AACA;;AACA,SAAKzD,KAAL,GAAaA,KAAb;AACA,SAAKyD,MAAL,CAAY,CAAZ,EAAe,KAAKtD,aAApB,EAAmC,IAAnC,EAAyC6D,KAAzC,EAZ8C,CAa9C;AACH,GAdD;;AAeArE,EAAAA,OAAO,CAACe,SAAR,CAAkB+C,MAAlB,GAA2B,UAAUS,CAAV,EAAaC,QAAb,EAAuBC,eAAvB,EAAwCJ,KAAxC,EAA+C;AACtE,QAAI9C,KAAK,GAAG,IAAZ;;AACA,SAAKrB,aAAL,GAAsBqE,CAAC,GAAG,CAA1B;AACApF,IAAAA,SAAS,CAAC,YAAY;AAClB,UAAIoC,KAAK,CAACS,QAAV,EAAoB;AAChB,YAAI0C,KAAK,GAAGnD,KAAK,CAACS,QAAN,CAAe0C,KAA3B;AACAA,QAAAA,KAAK,CAACC,SAAN,GAAoBJ,CAAC,GAAG,CAAL,GAAU,gBAAgBA,CAAhB,GAAoB,qBAA9B,GAAsD,iBAAzE;AACAG,QAAAA,KAAK,CAACE,kBAAN,GAA2BJ,QAA3B;AACAE,QAAAA,KAAK,CAACG,eAAN,GAAwBR,KAAxB;AACAK,QAAAA,KAAK,CAACI,QAAN,GAAkBL,eAAe,GAAG,QAAH,GAAc,EAA/C;AACH;AACJ,KARQ,CAAT;AASH,GAZD;;AAaAzE,EAAAA,OAAO,CAACe,SAAR,CAAkBgE,MAAlB,GAA2B,YAAY;AACnC,QAAI1D,EAAJ;;AACA,QAAI2D,IAAI,GAAG3F,UAAU,CAAC,IAAD,CAArB;AACA,WAAQC,CAAC,CAACI,IAAD,EAAO;AAAEuF,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,GAAG7D,EAAE,GAAG,EAAL,EACjCA,EAAE,CAAC2D,IAAD,CAAF,GAAW,IADsB,EAEjC;AACA3D,MAAAA,EAAE,CAAC,eAAe2D,IAAhB,CAAF,GAA0B,IAHO,EAIjC3D,EAAE,CAAC,kBAAD,CAAF,GAAyB,KAAKhB,KAAL,KAAe;AAAE;AAJT,QAKjCgB,EAAE,CAAC,mBAAD,CAAF,GAA0B,KAAKhB,KAAL,KAAe;AAAE;AALV,QAMjCgB,EAAE,CAAC,iBAAD,CAAF,GAAwB,KAAKhB,KAAL,KAAe;AAAE;AANR,QAOjCgB,EAAE,CAAC,sBAAD,CAAF,GAA6B,KAAKhB,KAAL,KAAe;AAAE;AAPb,QAQjCgB,EAAE,CAAC,sBAAD,CAAF,GAA6B,KAAKhB,KAAL,KAAe;AAAG;AARd,QASjCgB,EAAE,CAAC,sBAAD,CAAF,GAA6B,KAAKhB,KAAL,KAAe;AAAG;AATd,QAUjCgB,EAV8B;AAAtB,KAAP,CAAT;AAWH,GAdD;;AAeA8D,EAAAA,MAAM,CAACC,cAAP,CAAsBpF,OAAO,CAACe,SAA9B,EAAyC,IAAzC,EAA+C;AAC3CsE,IAAAA,GAAG,EAAE,YAAY;AAAE,aAAO7F,UAAU,CAAC,IAAD,CAAjB;AAA0B,KADF;AAE3C8F,IAAAA,UAAU,EAAE,IAF+B;AAG3CC,IAAAA,YAAY,EAAE;AAH6B,GAA/C;AAKAJ,EAAAA,MAAM,CAACC,cAAP,CAAsBpF,OAAtB,EAA+B,UAA/B,EAA2C;AACvCqF,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO;AACH,oBAAY,CAAC,iBAAD;AADT,OAAP;AAGH,KALsC;AAMvCC,IAAAA,UAAU,EAAE,IAN2B;AAOvCC,IAAAA,YAAY,EAAE;AAPyB,GAA3C;AASAJ,EAAAA,MAAM,CAACC,cAAP,CAAsBpF,OAAtB,EAA+B,OAA/B,EAAwC;AACpCqF,IAAAA,GAAG,EAAE,YAAY;AAAE,aAAO,uwEAAP;AAAixE,KADhwE;AAEpCC,IAAAA,UAAU,EAAE,IAFwB;AAGpCC,IAAAA,YAAY,EAAE;AAHsB,GAAxC;AAKA,SAAOvF,OAAP;AACH,CAtV8B,EAA/B;;AAuVA,IAAIwF,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,CAA0BvF,OAA1B,EAAmC;AAC/BlB,IAAAA,gBAAgB,CAAC,IAAD,EAAOkB,OAAP,CAAhB;AACH;;AACDuF,EAAAA,gBAAgB,CAACzE,SAAjB,CAA2B0E,iBAA3B,GAA+C,YAAY;AACvD,QAAI,KAAKC,WAAL,KAAqB5C,SAAzB,EAAoC;AAChC,WAAK4C,WAAL,GAAmB9F,MAAM,CAACyF,GAAP,CAAW,gBAAX,EAA6B,YAA7B,CAAnB;AACH;;AACD,QAAI,KAAKM,iBAAL,KAA2B7C,SAA/B,EAA0C;AACtC,UAAIkC,IAAI,GAAG3F,UAAU,CAAC,IAAD,CAArB;AACA,WAAKsG,iBAAL,GAAyB/F,MAAM,CAACyF,GAAP,CAAW,mBAAX,EAAgCzF,MAAM,CAACyF,GAAP,CAAW,SAAX,EAAsBL,IAAI,KAAK,KAAT,GAAiB,OAAjB,GAA2B,UAAjD,CAAhC,CAAzB;AACH;AACJ,GARD;;AASAQ,EAAAA,gBAAgB,CAACzE,SAAjB,CAA2BgE,MAA3B,GAAoC,YAAY;AAC5C,WAAQzF,CAAC,CAACI,IAAD,EAAO;AAAEwF,MAAAA,KAAK,EAAE7F,UAAU,CAAC,IAAD;AAAnB,KAAP,EAAoCC,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE;AAAT,KAAR,EAAwC,KAAKQ,WAAL,IAClFpG,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE;AAAT,KAAR,EAA6C5F,CAAC,CAAC,UAAD,EAAa;AAAEsG,MAAAA,IAAI,EAAE,KAAKF,WAAb;AAA0BG,MAAAA,IAAI,EAAE;AAAhC,KAAb,CAA9C,CADyC,EAC6D,KAAKC,WAAL,IACvGxG,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE,wBAAT;AAAmCa,MAAAA,SAAS,EAAEjG,iBAAiB,CAAC,KAAKgG,WAAN;AAA/D,KAAR,CAFyC,CAArC,EAE2FxG,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE;AAAT,KAAR,EAA2C,KAAKS,iBAAL,IAC5IrG,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE;AAAT,KAAR,EAAgD5F,CAAC,CAAC,aAAD,EAAgB;AAAE0G,MAAAA,IAAI,EAAE,KAAKL;AAAb,KAAhB,CAAjD,CADgG,EACK,KAAKM,cAAL,IACtG3G,CAAC,CAAC,KAAD,EAAQ;AAAE4F,MAAAA,KAAK,EAAE,2BAAT;AAAsCa,MAAAA,SAAS,EAAEjG,iBAAiB,CAAC,KAAKmG,cAAN;AAAlE,KAAR,CAFgG,CAF5F,CAAT;AAKH,GAND;;AAOA,SAAOT,gBAAP;AACH,CArBqC,EAAtC;;AAsBA,SAASzF,SAAS,IAAImG,aAAtB,EAAqCV,gBAAgB,IAAIW,qBAAzD","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, w as writeTask, d as getIonMode, h, e as getElement, H as Host } from './core-ca0488fc.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\nvar Refresher = /** @class */ (function () {\n    function class_1(hostRef) {\n        registerInstance(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n    }\n    class_1.prototype.disabledChanged = function () {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    };\n    class_1.prototype.connectedCallback = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var contentEl, _a, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (this.el.getAttribute('slot') !== 'fixed') {\n                            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n                            return [2 /*return*/];\n                        }\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('<ion-refresher> must be used inside an <ion-content>');\n                            return [2 /*return*/];\n                        }\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 1:\n                        _a.scrollEl = _c.sent();\n                        _b = this;\n                        return [4 /*yield*/, import('./index-624eea58.js')];\n                    case 2:\n                        _b.gesture = (_c.sent()).createGesture({\n                            el: contentEl,\n                            gestureName: 'refresher',\n                            gesturePriority: 10,\n                            direction: 'y',\n                            threshold: 20,\n                            passive: false,\n                            canStart: function () { return _this.canStart(); },\n                            onStart: function () { return _this.onStart(); },\n                            onMove: function (ev) { return _this.onMove(ev); },\n                            onEnd: function () { return _this.onEnd(); },\n                        });\n                        this.disabledChanged();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.disconnectedCallback = function () {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    };\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    class_1.prototype.complete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.close(32 /* Completing */, '120ms');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    class_1.prototype.cancel = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.close(16 /* Cancelling */, '');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    class_1.prototype.getProgress = function () {\n        return Promise.resolve(this.progress);\n    };\n    class_1.prototype.canStart = function () {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    };\n    class_1.prototype.onStart = function () {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    };\n    class_1.prototype.onMove = function (detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        var ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        var pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        var deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            var scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        var pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    };\n    class_1.prototype.onEnd = function () {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    };\n    class_1.prototype.beginRefresh = function () {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    };\n    class_1.prototype.close = function (state, delay) {\n        var _this = this;\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(function () {\n            _this.state = 1 /* Inactive */;\n            _this.progress = 0;\n            _this.didStart = false;\n            _this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    };\n    class_1.prototype.setCss = function (y, duration, overflowVisible, delay) {\n        var _this = this;\n        this.appliedStyles = (y > 0);\n        writeTask(function () {\n            if (_this.scrollEl) {\n                var style = _this.scrollEl.style;\n                style.transform = ((y > 0) ? \"translateY(\" + y + \"px) translateZ(0px)\" : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    };\n    class_1.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return (h(Host, { slot: \"fixed\", class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"refresher-\" + mode] = true,\n                _a['refresher-active'] = this.state !== 1 /* Inactive */,\n                _a['refresher-pulling'] = this.state === 2 /* Pulling */,\n                _a['refresher-ready'] = this.state === 4 /* Ready */,\n                _a['refresher-refreshing'] = this.state === 8 /* Refreshing */,\n                _a['refresher-cancelling'] = this.state === 16 /* Cancelling */,\n                _a['refresher-completing'] = this.state === 32 /* Completing */,\n                _a) }));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"style\", {\n        get: function () { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\nvar RefresherContent = /** @class */ (function () {\n    function RefresherContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    RefresherContent.prototype.componentWillLoad = function () {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    RefresherContent.prototype.render = function () {\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\n    };\n    return RefresherContent;\n}());\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"]},"metadata":{},"sourceType":"module"}