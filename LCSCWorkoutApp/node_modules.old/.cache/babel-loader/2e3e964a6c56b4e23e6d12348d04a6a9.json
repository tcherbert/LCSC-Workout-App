{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nvar ActionSheetController =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an action sheet overlay with action sheet options.\n   *\n   * @param options The options to use to create the action sheet.\n   */\n\n\n  class_1.prototype.create = function (options) {\n    return createOverlay('ion-action-sheet', options);\n  };\n  /**\n   * Dismiss the open action sheet overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the action sheet.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the action sheet.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n   */\n\n\n  class_1.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n  };\n  /**\n   * Get the most recently opened action sheet overlay.\n   */\n\n\n  class_1.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-action-sheet')];\n      });\n    });\n  };\n\n  return class_1;\n}();\n\nvar AlertController =\n/** @class */\nfunction () {\n  function class_2(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an alert overlay with alert options.\n   *\n   * @param options The options to use to create the alert.\n   */\n\n\n  class_2.prototype.create = function (options) {\n    return createOverlay('ion-alert', options);\n  };\n  /**\n   * Dismiss the open alert overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the alert.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the alert.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n   */\n\n\n  class_2.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-alert', id);\n  };\n  /**\n   * Get the most recently opened alert overlay.\n   */\n\n\n  class_2.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-alert')];\n      });\n    });\n  };\n\n  return class_2;\n}();\n\nvar Anchor =\n/** @class */\nfunction () {\n  function Anchor(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = function (ev) {\n      openURL(_this.href, ev, _this.routerDirection);\n    };\n  }\n\n  Anchor.prototype.componentDidLoad = function () {\n    console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n  };\n\n  Anchor.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    var attrs = {\n      href: this.href,\n      rel: this.rel\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), (_a = {}, _a[mode] = true, _a['ion-activatable'] = true, _a))\n    }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n  };\n\n  Object.defineProperty(Anchor, \"style\", {\n    get: function () {\n      return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Anchor;\n}();\n\nvar LoadingController =\n/** @class */\nfunction () {\n  function class_3(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a loading overlay with loading options.\n   *\n   * @param options The options to use to create the loading.\n   */\n\n\n  class_3.prototype.create = function (options) {\n    return createOverlay('ion-loading', options);\n  };\n  /**\n   * Dismiss the open loading overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the loading.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the loading.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n   */\n\n\n  class_3.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-loading', id);\n  };\n  /**\n   * Get the most recently opened loading overlay.\n   */\n\n\n  class_3.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-loading')];\n      });\n    });\n  };\n\n  return class_3;\n}();\n\nvar ModalController =\n/** @class */\nfunction () {\n  function class_4(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a modal overlay with modal options.\n   *\n   * @param options The options to use to create the modal.\n   */\n\n\n  class_4.prototype.create = function (options) {\n    return createOverlay('ion-modal', options);\n  };\n  /**\n   * Dismiss the open modal overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the modal.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the modal.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n   */\n\n\n  class_4.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-modal', id);\n  };\n  /**\n   * Get the most recently opened modal overlay.\n   */\n\n\n  class_4.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-modal')];\n      });\n    });\n  };\n\n  return class_4;\n}();\n\nvar PickerController =\n/** @class */\nfunction () {\n  function class_5(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a picker overlay with picker options.\n   *\n   * @param options The options to use to create the picker.\n   */\n\n\n  class_5.prototype.create = function (options) {\n    return createOverlay('ion-picker', options);\n  };\n  /**\n   * Dismiss the open picker overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the picker.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the picker.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n   */\n\n\n  class_5.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-picker', id);\n  };\n  /**\n   * Get the most recently opened picker overlay.\n   */\n\n\n  class_5.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-picker')];\n      });\n    });\n  };\n\n  return class_5;\n}();\n\nvar PopoverController =\n/** @class */\nfunction () {\n  function class_6(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a popover overlay with popover options.\n   *\n   * @param options The options to use to create the popover.\n   */\n\n\n  class_6.prototype.create = function (options) {\n    return createOverlay('ion-popover', options);\n  };\n  /**\n   * Dismiss the open popover overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the popover.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the popover.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n   */\n\n\n  class_6.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-popover', id);\n  };\n  /**\n   * Get the most recently opened popover overlay.\n   */\n\n\n  class_6.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-popover')];\n      });\n    });\n  };\n\n  return class_6;\n}();\n\nvar ToastController =\n/** @class */\nfunction () {\n  function class_7(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a toast overlay with toast options.\n   *\n   * @param options The options to use to create the toast.\n   */\n\n\n  class_7.prototype.create = function (options) {\n    return createOverlay('ion-toast', options);\n  };\n  /**\n   * Dismiss the open toast overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n   * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n   */\n\n\n  class_7.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-toast', id);\n  };\n  /**\n   * Get the most recently opened toast overlay.\n   */\n\n\n  class_7.prototype.getTop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-toast')];\n      });\n    });\n  };\n\n  return class_7;\n}();\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };","map":{"version":3,"sources":["/Users/timherbert/OneDrive/school/cs480/LCSCWorkoutApp/node_modules/@ionic/core/dist/esm-es5/ion-action-sheet-controller_8.entry.js"],"names":["__awaiter","__generator","r","registerInstance","d","getIonMode","h","H","Host","createOverlay","j","dismissOverlay","k","getOverlay","o","openURL","c","createColorClasses","ActionSheetController","class_1","hostRef","prototype","create","options","dismiss","data","role","id","document","getTop","_a","AlertController","class_2","Anchor","_this","routerDirection","onClick","ev","href","componentDidLoad","console","warn","render","mode","attrs","rel","class","Object","assign","color","defineProperty","get","enumerable","configurable","LoadingController","class_3","ModalController","class_4","PickerController","class_5","PopoverController","class_6","ToastController","class_7","ion_action_sheet_controller","ion_alert_controller","ion_anchor","ion_loading_controller","ion_modal_controller","ion_picker_controller","ion_popover_controller","ion_toast_controller"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\nvar ActionSheetController = /** @class */ (function () {\n    function class_1(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an action sheet overlay with action sheet options.\n     *\n     * @param options The options to use to create the action sheet.\n     */\n    class_1.prototype.create = function (options) {\n        return createOverlay('ion-action-sheet', options);\n    };\n    /**\n     * Dismiss the open action sheet overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the action sheet.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the action sheet.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n     */\n    class_1.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n    };\n    /**\n     * Get the most recently opened action sheet overlay.\n     */\n    class_1.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-action-sheet')];\n            });\n        });\n    };\n    return class_1;\n}());\nvar AlertController = /** @class */ (function () {\n    function class_2(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an alert overlay with alert options.\n     *\n     * @param options The options to use to create the alert.\n     */\n    class_2.prototype.create = function (options) {\n        return createOverlay('ion-alert', options);\n    };\n    /**\n     * Dismiss the open alert overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the alert.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the alert.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n     */\n    class_2.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-alert', id);\n    };\n    /**\n     * Get the most recently opened alert overlay.\n     */\n    class_2.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-alert')];\n            });\n        });\n    };\n    return class_2;\n}());\nvar Anchor = /** @class */ (function () {\n    function Anchor(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = function (ev) {\n            openURL(_this.href, ev, _this.routerDirection);\n        };\n    }\n    Anchor.prototype.componentDidLoad = function () {\n        console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n    };\n    Anchor.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        var attrs = {\n            href: this.href,\n            rel: this.rel\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), (_a = {}, _a[mode] = true, _a['ion-activatable'] = true, _a)) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    };\n    Object.defineProperty(Anchor, \"style\", {\n        get: function () { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return Anchor;\n}());\nvar LoadingController = /** @class */ (function () {\n    function class_3(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a loading overlay with loading options.\n     *\n     * @param options The options to use to create the loading.\n     */\n    class_3.prototype.create = function (options) {\n        return createOverlay('ion-loading', options);\n    };\n    /**\n     * Dismiss the open loading overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n     */\n    class_3.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-loading', id);\n    };\n    /**\n     * Get the most recently opened loading overlay.\n     */\n    class_3.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-loading')];\n            });\n        });\n    };\n    return class_3;\n}());\nvar ModalController = /** @class */ (function () {\n    function class_4(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a modal overlay with modal options.\n     *\n     * @param options The options to use to create the modal.\n     */\n    class_4.prototype.create = function (options) {\n        return createOverlay('ion-modal', options);\n    };\n    /**\n     * Dismiss the open modal overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the modal.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n     */\n    class_4.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-modal', id);\n    };\n    /**\n     * Get the most recently opened modal overlay.\n     */\n    class_4.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-modal')];\n            });\n        });\n    };\n    return class_4;\n}());\nvar PickerController = /** @class */ (function () {\n    function class_5(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a picker overlay with picker options.\n     *\n     * @param options The options to use to create the picker.\n     */\n    class_5.prototype.create = function (options) {\n        return createOverlay('ion-picker', options);\n    };\n    /**\n     * Dismiss the open picker overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n     */\n    class_5.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-picker', id);\n    };\n    /**\n     * Get the most recently opened picker overlay.\n     */\n    class_5.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-picker')];\n            });\n        });\n    };\n    return class_5;\n}());\nvar PopoverController = /** @class */ (function () {\n    function class_6(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a popover overlay with popover options.\n     *\n     * @param options The options to use to create the popover.\n     */\n    class_6.prototype.create = function (options) {\n        return createOverlay('ion-popover', options);\n    };\n    /**\n     * Dismiss the open popover overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the popover.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the popover.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n     */\n    class_6.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-popover', id);\n    };\n    /**\n     * Get the most recently opened popover overlay.\n     */\n    class_6.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-popover')];\n            });\n        });\n    };\n    return class_6;\n}());\nvar ToastController = /** @class */ (function () {\n    function class_7(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a toast overlay with toast options.\n     *\n     * @param options The options to use to create the toast.\n     */\n    class_7.prototype.create = function (options) {\n        return createOverlay('ion-toast', options);\n    };\n    /**\n     * Dismiss the open toast overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n     */\n    class_7.prototype.dismiss = function (data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-toast', id);\n    };\n    /**\n     * Get the most recently opened toast overlay.\n     */\n    class_7.prototype.getTop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, getOverlay(document, 'ion-toast')];\n            });\n        });\n    };\n    return class_7;\n}());\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\n"]},"metadata":{},"sourceType":"module"}