{"ast":null,"code":"var watchForOptions = function watchForOptions(containerEl, tagName, onChange) {\n  var mutation = new MutationObserver(function (mutationList) {\n    onChange(getSelectedOption(mutationList, tagName));\n  });\n  mutation.observe(containerEl, {\n    childList: true,\n    subtree: true\n  });\n  return mutation;\n};\n\nvar getSelectedOption = function getSelectedOption(mutationList, tagName) {\n  var newOption;\n  mutationList.forEach(function (mut) {\n    // tslint:disable-next-line: prefer-for-of\n    for (var i = 0; i < mut.addedNodes.length; i++) {\n      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n    }\n  });\n  return newOption;\n};\n\nvar findCheckedOption = function findCheckedOption(el, tagName) {\n  if (el.nodeType !== 1) {\n    return undefined;\n  }\n\n  var options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n  return options.find(function (o) {\n    return o.checked === true;\n  });\n};\n\nexport { findCheckedOption as f, watchForOptions as w };","map":{"version":3,"sources":["/Users/timherbert/OneDrive/school/cs480/LCSCWorkoutApp/node_modules/@ionic/core/dist/esm-es5/watch-options-2af96011.js"],"names":["watchForOptions","containerEl","tagName","onChange","mutation","MutationObserver","mutationList","getSelectedOption","observe","childList","subtree","newOption","forEach","mut","i","addedNodes","length","findCheckedOption","el","nodeType","undefined","options","toUpperCase","Array","from","querySelectorAll","find","o","checked","f","w"],"mappings":"AAAA,IAAIA,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,WAAV,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0C;AAC5D,MAAIC,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,UAAUC,YAAV,EAAwB;AACxDH,IAAAA,QAAQ,CAACI,iBAAiB,CAACD,YAAD,EAAeJ,OAAf,CAAlB,CAAR;AACH,GAFc,CAAf;AAGAE,EAAAA,QAAQ,CAACI,OAAT,CAAiBP,WAAjB,EAA8B;AAC1BQ,IAAAA,SAAS,EAAE,IADe;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAA9B;AAIA,SAAON,QAAP;AACH,CATD;;AAUA,IAAIG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUD,YAAV,EAAwBJ,OAAxB,EAAiC;AACrD,MAAIS,SAAJ;AACAL,EAAAA,YAAY,CAACM,OAAb,CAAqB,UAAUC,GAAV,EAAe;AAChC;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,UAAJ,CAAeC,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;AAC5CH,MAAAA,SAAS,GAAGM,iBAAiB,CAACJ,GAAG,CAACE,UAAJ,CAAeD,CAAf,CAAD,EAAoBZ,OAApB,CAAjB,IAAiDS,SAA7D;AACH;AACJ,GALD;AAMA,SAAOA,SAAP;AACH,CATD;;AAUA,IAAIM,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,EAAV,EAAchB,OAAd,EAAuB;AAC3C,MAAIgB,EAAE,CAACC,QAAH,KAAgB,CAApB,EAAuB;AACnB,WAAOC,SAAP;AACH;;AACD,MAAIC,OAAO,GAAIH,EAAE,CAAChB,OAAH,KAAeA,OAAO,CAACoB,WAAR,EAAhB,GACR,CAACJ,EAAD,CADQ,GAERK,KAAK,CAACC,IAAN,CAAWN,EAAE,CAACO,gBAAH,CAAoBvB,OAApB,CAAX,CAFN;AAGA,SAAOmB,OAAO,CAACK,IAAR,CAAa,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,OAAF,KAAc,IAArB;AAA4B,GAAxD,CAAP;AACH,CARD;;AASA,SAASX,iBAAiB,IAAIY,CAA9B,EAAiC7B,eAAe,IAAI8B,CAApD","sourcesContent":["var watchForOptions = function (containerEl, tagName, onChange) {\n    var mutation = new MutationObserver(function (mutationList) {\n        onChange(getSelectedOption(mutationList, tagName));\n    });\n    mutation.observe(containerEl, {\n        childList: true,\n        subtree: true\n    });\n    return mutation;\n};\nvar getSelectedOption = function (mutationList, tagName) {\n    var newOption;\n    mutationList.forEach(function (mut) {\n        // tslint:disable-next-line: prefer-for-of\n        for (var i = 0; i < mut.addedNodes.length; i++) {\n            newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n        }\n    });\n    return newOption;\n};\nvar findCheckedOption = function (el, tagName) {\n    if (el.nodeType !== 1) {\n        return undefined;\n    }\n    var options = (el.tagName === tagName.toUpperCase())\n        ? [el]\n        : Array.from(el.querySelectorAll(tagName));\n    return options.find(function (o) { return o.checked === true; });\n};\nexport { findCheckedOption as f, watchForOptions as w };\n"]},"metadata":{},"sourceType":"module"}